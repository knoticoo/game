{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  gold: 1000,\n  soldiers: 100,\n  influence: 50,\n  prestige: 25,\n  gems: 0,\n  // Premium currency\n  dailyIncome: {\n    gold: 100,\n    soldiers: 5,\n    influence: 2,\n    prestige: 1\n  },\n  dailyConsumption: {\n    gold: 50,\n    soldiers: 2\n  },\n  buildings: {\n    castle: {\n      level: 1,\n      maxLevel: 10,\n      cost: 500\n    },\n    barracks: {\n      level: 1,\n      maxLevel: 8,\n      cost: 300\n    },\n    treasury: {\n      level: 1,\n      maxLevel: 5,\n      cost: 200\n    },\n    court: {\n      level: 1,\n      maxLevel: 6,\n      cost: 400\n    }\n  },\n  lastDailyReset: Date.now()\n};\nconst resourceSlice = createSlice({\n  name: 'resource',\n  initialState,\n  reducers: {\n    addResource: (state, action) => {\n      const {\n        type,\n        amount\n      } = action.payload;\n      if (state[type] !== undefined) {\n        state[type] = Math.max(0, state[type] + amount);\n      }\n    },\n    spendResource: (state, action) => {\n      const {\n        type,\n        amount\n      } = action.payload;\n      if (state[type] !== undefined) {\n        state[type] = Math.max(0, state[type] - amount);\n      }\n    },\n    setResource: (state, action) => {\n      const {\n        type,\n        amount\n      } = action.payload;\n      if (state[type] !== undefined) {\n        state[type] = Math.max(0, amount);\n      }\n    },\n    upgradeBuilding: (state, action) => {\n      const {\n        buildingType,\n        cost\n      } = action.payload;\n      const building = state.buildings[buildingType];\n      if (building && building.level < building.maxLevel && state.gold >= cost) {\n        state.gold -= cost;\n        building.level += 1;\n        building.cost = Math.floor(building.cost * 1.5);\n\n        // Update daily income based on building levels\n        state.dailyIncome.gold += buildingType === 'treasury' ? 20 : 0;\n        state.dailyIncome.soldiers += buildingType === 'barracks' ? 3 : 0;\n        state.dailyIncome.influence += buildingType === 'court' ? 1 : 0;\n      }\n    },\n    processDailyReset: state => {\n      const now = Date.now();\n      const oneDay = 24 * 60 * 60 * 1000;\n      if (now - state.lastDailyReset >= oneDay) {\n        // Add daily income\n        state.gold += state.dailyIncome.gold;\n        state.soldiers += state.dailyIncome.soldiers;\n        state.influence += state.dailyIncome.influence;\n        state.prestige += state.dailyIncome.prestige;\n\n        // Subtract daily consumption\n        state.gold = Math.max(0, state.gold - state.dailyConsumption.gold);\n        state.soldiers = Math.max(0, state.soldiers - state.dailyConsumption.soldiers);\n        state.lastDailyReset = now;\n      }\n    },\n    updateDailyIncome: (state, action) => {\n      state.dailyIncome = {\n        ...state.dailyIncome,\n        ...action.payload\n      };\n    },\n    updateDailyConsumption: (state, action) => {\n      state.dailyConsumption = {\n        ...state.dailyConsumption,\n        ...action.payload\n      };\n    },\n    resetResources: state => {\n      return initialState;\n    }\n  }\n});\nexport const {\n  addResource,\n  spendResource,\n  setResource,\n  upgradeBuilding,\n  processDailyReset,\n  updateDailyIncome,\n  updateDailyConsumption,\n  resetResources\n} = resourceSlice.actions;\nexport default resourceSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","gold","soldiers","influence","prestige","gems","dailyIncome","dailyConsumption","buildings","castle","level","maxLevel","cost","barracks","treasury","court","lastDailyReset","Date","now","resourceSlice","name","reducers","addResource","state","action","type","amount","payload","undefined","Math","max","spendResource","setResource","upgradeBuilding","buildingType","building","floor","processDailyReset","oneDay","updateDailyIncome","updateDailyConsumption","resetResources","actions","reducer"],"sources":["/workspace/src/store/slices/resourceSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  gold: 1000,\n  soldiers: 100,\n  influence: 50,\n  prestige: 25,\n  gems: 0, // Premium currency\n  dailyIncome: {\n    gold: 100,\n    soldiers: 5,\n    influence: 2,\n    prestige: 1,\n  },\n  dailyConsumption: {\n    gold: 50,\n    soldiers: 2,\n  },\n  buildings: {\n    castle: { level: 1, maxLevel: 10, cost: 500 },\n    barracks: { level: 1, maxLevel: 8, cost: 300 },\n    treasury: { level: 1, maxLevel: 5, cost: 200 },\n    court: { level: 1, maxLevel: 6, cost: 400 },\n  },\n  lastDailyReset: Date.now(),\n};\n\nconst resourceSlice = createSlice({\n  name: 'resource',\n  initialState,\n  reducers: {\n    addResource: (state, action) => {\n      const { type, amount } = action.payload;\n      if (state[type] !== undefined) {\n        state[type] = Math.max(0, state[type] + amount);\n      }\n    },\n    spendResource: (state, action) => {\n      const { type, amount } = action.payload;\n      if (state[type] !== undefined) {\n        state[type] = Math.max(0, state[type] - amount);\n      }\n    },\n    setResource: (state, action) => {\n      const { type, amount } = action.payload;\n      if (state[type] !== undefined) {\n        state[type] = Math.max(0, amount);\n      }\n    },\n    upgradeBuilding: (state, action) => {\n      const { buildingType, cost } = action.payload;\n      const building = state.buildings[buildingType];\n      if (building && building.level < building.maxLevel && state.gold >= cost) {\n        state.gold -= cost;\n        building.level += 1;\n        building.cost = Math.floor(building.cost * 1.5);\n        \n        // Update daily income based on building levels\n        state.dailyIncome.gold += buildingType === 'treasury' ? 20 : 0;\n        state.dailyIncome.soldiers += buildingType === 'barracks' ? 3 : 0;\n        state.dailyIncome.influence += buildingType === 'court' ? 1 : 0;\n      }\n    },\n    processDailyReset: (state) => {\n      const now = Date.now();\n      const oneDay = 24 * 60 * 60 * 1000;\n      \n      if (now - state.lastDailyReset >= oneDay) {\n        // Add daily income\n        state.gold += state.dailyIncome.gold;\n        state.soldiers += state.dailyIncome.soldiers;\n        state.influence += state.dailyIncome.influence;\n        state.prestige += state.dailyIncome.prestige;\n        \n        // Subtract daily consumption\n        state.gold = Math.max(0, state.gold - state.dailyConsumption.gold);\n        state.soldiers = Math.max(0, state.soldiers - state.dailyConsumption.soldiers);\n        \n        state.lastDailyReset = now;\n      }\n    },\n    updateDailyIncome: (state, action) => {\n      state.dailyIncome = { ...state.dailyIncome, ...action.payload };\n    },\n    updateDailyConsumption: (state, action) => {\n      state.dailyConsumption = { ...state.dailyConsumption, ...action.payload };\n    },\n    resetResources: (state) => {\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  addResource,\n  spendResource,\n  setResource,\n  upgradeBuilding,\n  processDailyReset,\n  updateDailyIncome,\n  updateDailyConsumption,\n  resetResources,\n} = resourceSlice.actions;\n\nexport default resourceSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}