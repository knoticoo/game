{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  currentStory: null,\n  currentChoices: [],\n  storyProgress: 0,\n  unlockedStories: ['tutorial'],\n  completedStories: [],\n  storyFlags: {},\n  dialogueHistory: [],\n  currentSpeaker: null,\n  textDisplaySpeed: 'normal',\n  autoAdvance: false,\n  storyData: {\n    chapters: {\n      1: {\n        title: \"The Crown's Burden\",\n        scenes: [{\n          id: 'intro',\n          title: 'A New Reign Begins',\n          text: 'You sit upon the throne, the weight of the crown heavy upon your brow. The courtiers whisper among themselves, waiting for your first decree as the new monarch.',\n          choices: [{\n            id: 'diplomatic',\n            text: 'Call for a council of advisors',\n            consequence: 'diplomatic_path'\n          }, {\n            id: 'military',\n            text: 'Inspect the royal guard',\n            consequence: 'military_path'\n          }, {\n            id: 'economic',\n            text: 'Review the treasury reports',\n            consequence: 'economic_path'\n          }],\n          background: 'throne_room',\n          music: 'royal_theme'\n        }]\n      }\n    }\n  }\n};\nconst narrativeSlice = createSlice({\n  name: 'narrative',\n  initialState,\n  reducers: {\n    startStory: (state, action) => {\n      const {\n        storyId,\n        chapterId,\n        sceneId\n      } = action.payload;\n      state.currentStory = {\n        storyId,\n        chapterId,\n        sceneId\n      };\n      state.storyProgress = 0;\n    },\n    setCurrentChoices: (state, action) => {\n      state.currentChoices = action.payload;\n    },\n    makeChoice: (state, action) => {\n      const {\n        choiceId,\n        consequence\n      } = action.payload;\n\n      // Add to dialogue history\n      state.dialogueHistory.push({\n        choiceId,\n        consequence,\n        timestamp: Date.now()\n      });\n\n      // Update story flags based on consequence\n      if (consequence) {\n        state.storyFlags[consequence] = true;\n      }\n\n      // Clear current choices\n      state.currentChoices = [];\n    },\n    advanceStory: (state, action) => {\n      const {\n        nextSceneId,\n        choices\n      } = action.payload;\n      state.currentStory.sceneId = nextSceneId;\n      state.storyProgress += 1;\n      state.currentChoices = choices || [];\n    },\n    setCurrentSpeaker: (state, action) => {\n      state.currentSpeaker = action.payload;\n    },\n    addToDialogueHistory: (state, action) => {\n      state.dialogueHistory.push({\n        ...action.payload,\n        timestamp: Date.now()\n      });\n    },\n    unlockStory: (state, action) => {\n      const storyId = action.payload;\n      if (!state.unlockedStories.includes(storyId)) {\n        state.unlockedStories.push(storyId);\n      }\n    },\n    completeStory: (state, action) => {\n      const storyId = action.payload;\n      if (!state.completedStories.includes(storyId)) {\n        state.completedStories.push(storyId);\n      }\n    },\n    setStoryFlag: (state, action) => {\n      const {\n        flag,\n        value\n      } = action.payload;\n      state.storyFlags[flag] = value;\n    },\n    updateTextDisplaySpeed: (state, action) => {\n      state.textDisplaySpeed = action.payload;\n    },\n    toggleAutoAdvance: state => {\n      state.autoAdvance = !state.autoAdvance;\n    },\n    resetNarrative: state => {\n      return initialState;\n    }\n  }\n});\nexport const {\n  startStory,\n  setCurrentChoices,\n  makeChoice,\n  advanceStory,\n  setCurrentSpeaker,\n  addToDialogueHistory,\n  unlockStory,\n  completeStory,\n  setStoryFlag,\n  updateTextDisplaySpeed,\n  toggleAutoAdvance,\n  resetNarrative\n} = narrativeSlice.actions;\nexport default narrativeSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","currentStory","currentChoices","storyProgress","unlockedStories","completedStories","storyFlags","dialogueHistory","currentSpeaker","textDisplaySpeed","autoAdvance","storyData","chapters","title","scenes","id","text","choices","consequence","background","music","narrativeSlice","name","reducers","startStory","state","action","storyId","chapterId","sceneId","payload","setCurrentChoices","makeChoice","choiceId","push","timestamp","Date","now","advanceStory","nextSceneId","setCurrentSpeaker","addToDialogueHistory","unlockStory","includes","completeStory","setStoryFlag","flag","value","updateTextDisplaySpeed","toggleAutoAdvance","resetNarrative","actions","reducer"],"sources":["/workspace/src/store/slices/narrativeSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  currentStory: null,\n  currentChoices: [],\n  storyProgress: 0,\n  unlockedStories: ['tutorial'],\n  completedStories: [],\n  storyFlags: {},\n  dialogueHistory: [],\n  currentSpeaker: null,\n  textDisplaySpeed: 'normal',\n  autoAdvance: false,\n  storyData: {\n    chapters: {\n      1: {\n        title: \"The Crown's Burden\",\n        scenes: [\n          {\n            id: 'intro',\n            title: 'A New Reign Begins',\n            text: 'You sit upon the throne, the weight of the crown heavy upon your brow. The courtiers whisper among themselves, waiting for your first decree as the new monarch.',\n            choices: [\n              { id: 'diplomatic', text: 'Call for a council of advisors', consequence: 'diplomatic_path' },\n              { id: 'military', text: 'Inspect the royal guard', consequence: 'military_path' },\n              { id: 'economic', text: 'Review the treasury reports', consequence: 'economic_path' },\n            ],\n            background: 'throne_room',\n            music: 'royal_theme',\n          },\n        ],\n      },\n    },\n  },\n};\n\nconst narrativeSlice = createSlice({\n  name: 'narrative',\n  initialState,\n  reducers: {\n    startStory: (state, action) => {\n      const { storyId, chapterId, sceneId } = action.payload;\n      state.currentStory = { storyId, chapterId, sceneId };\n      state.storyProgress = 0;\n    },\n    setCurrentChoices: (state, action) => {\n      state.currentChoices = action.payload;\n    },\n    makeChoice: (state, action) => {\n      const { choiceId, consequence } = action.payload;\n      \n      // Add to dialogue history\n      state.dialogueHistory.push({\n        choiceId,\n        consequence,\n        timestamp: Date.now(),\n      });\n      \n      // Update story flags based on consequence\n      if (consequence) {\n        state.storyFlags[consequence] = true;\n      }\n      \n      // Clear current choices\n      state.currentChoices = [];\n    },\n    advanceStory: (state, action) => {\n      const { nextSceneId, choices } = action.payload;\n      state.currentStory.sceneId = nextSceneId;\n      state.storyProgress += 1;\n      state.currentChoices = choices || [];\n    },\n    setCurrentSpeaker: (state, action) => {\n      state.currentSpeaker = action.payload;\n    },\n    addToDialogueHistory: (state, action) => {\n      state.dialogueHistory.push({\n        ...action.payload,\n        timestamp: Date.now(),\n      });\n    },\n    unlockStory: (state, action) => {\n      const storyId = action.payload;\n      if (!state.unlockedStories.includes(storyId)) {\n        state.unlockedStories.push(storyId);\n      }\n    },\n    completeStory: (state, action) => {\n      const storyId = action.payload;\n      if (!state.completedStories.includes(storyId)) {\n        state.completedStories.push(storyId);\n      }\n    },\n    setStoryFlag: (state, action) => {\n      const { flag, value } = action.payload;\n      state.storyFlags[flag] = value;\n    },\n    updateTextDisplaySpeed: (state, action) => {\n      state.textDisplaySpeed = action.payload;\n    },\n    toggleAutoAdvance: (state) => {\n      state.autoAdvance = !state.autoAdvance;\n    },\n    resetNarrative: (state) => {\n      return initialState;\n    },\n  },\n});\n\nexport const {\n  startStory,\n  setCurrentChoices,\n  makeChoice,\n  advanceStory,\n  setCurrentSpeaker,\n  addToDialogueHistory,\n  unlockStory,\n  completeStory,\n  setStoryFlag,\n  updateTextDisplaySpeed,\n  toggleAutoAdvance,\n  resetNarrative,\n} = narrativeSlice.actions;\n\nexport default narrativeSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,YAAY,EAAE,IAAI;EAClBC,cAAc,EAAE,EAAE;EAClBC,aAAa,EAAE,CAAC;EAChBC,eAAe,EAAE,CAAC,UAAU,CAAC;EAC7BC,gBAAgB,EAAE,EAAE;EACpBC,UAAU,EAAE,CAAC,CAAC;EACdC,eAAe,EAAE,EAAE;EACnBC,cAAc,EAAE,IAAI;EACpBC,gBAAgB,EAAE,QAAQ;EAC1BC,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAE;IACTC,QAAQ,EAAE;MACR,CAAC,EAAE;QACDC,KAAK,EAAE,oBAAoB;QAC3BC,MAAM,EAAE,CACN;UACEC,EAAE,EAAE,OAAO;UACXF,KAAK,EAAE,oBAAoB;UAC3BG,IAAI,EAAE,kKAAkK;UACxKC,OAAO,EAAE,CACP;YAAEF,EAAE,EAAE,YAAY;YAAEC,IAAI,EAAE,gCAAgC;YAAEE,WAAW,EAAE;UAAkB,CAAC,EAC5F;YAAEH,EAAE,EAAE,UAAU;YAAEC,IAAI,EAAE,yBAAyB;YAAEE,WAAW,EAAE;UAAgB,CAAC,EACjF;YAAEH,EAAE,EAAE,UAAU;YAAEC,IAAI,EAAE,6BAA6B;YAAEE,WAAW,EAAE;UAAgB,CAAC,CACtF;UACDC,UAAU,EAAE,aAAa;UACzBC,KAAK,EAAE;QACT,CAAC;MAEL;IACF;EACF;AACF,CAAC;AAED,MAAMC,cAAc,GAAGtB,WAAW,CAAC;EACjCuB,IAAI,EAAE,WAAW;EACjBtB,YAAY;EACZuB,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEC,OAAO;QAAEC,SAAS;QAAEC;MAAQ,CAAC,GAAGH,MAAM,CAACI,OAAO;MACtDL,KAAK,CAACxB,YAAY,GAAG;QAAE0B,OAAO;QAAEC,SAAS;QAAEC;MAAQ,CAAC;MACpDJ,KAAK,CAACtB,aAAa,GAAG,CAAC;IACzB,CAAC;IACD4B,iBAAiB,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACvB,cAAc,GAAGwB,MAAM,CAACI,OAAO;IACvC,CAAC;IACDE,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAM;QAAEO,QAAQ;QAAEf;MAAY,CAAC,GAAGQ,MAAM,CAACI,OAAO;;MAEhD;MACAL,KAAK,CAAClB,eAAe,CAAC2B,IAAI,CAAC;QACzBD,QAAQ;QACRf,WAAW;QACXiB,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC,CAAC;;MAEF;MACA,IAAInB,WAAW,EAAE;QACfO,KAAK,CAACnB,UAAU,CAACY,WAAW,CAAC,GAAG,IAAI;MACtC;;MAEA;MACAO,KAAK,CAACvB,cAAc,GAAG,EAAE;IAC3B,CAAC;IACDoC,YAAY,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MAC/B,MAAM;QAAEa,WAAW;QAAEtB;MAAQ,CAAC,GAAGS,MAAM,CAACI,OAAO;MAC/CL,KAAK,CAACxB,YAAY,CAAC4B,OAAO,GAAGU,WAAW;MACxCd,KAAK,CAACtB,aAAa,IAAI,CAAC;MACxBsB,KAAK,CAACvB,cAAc,GAAGe,OAAO,IAAI,EAAE;IACtC,CAAC;IACDuB,iBAAiB,EAAEA,CAACf,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACjB,cAAc,GAAGkB,MAAM,CAACI,OAAO;IACvC,CAAC;IACDW,oBAAoB,EAAEA,CAAChB,KAAK,EAAEC,MAAM,KAAK;MACvCD,KAAK,CAAClB,eAAe,CAAC2B,IAAI,CAAC;QACzB,GAAGR,MAAM,CAACI,OAAO;QACjBK,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;IACDK,WAAW,EAAEA,CAACjB,KAAK,EAAEC,MAAM,KAAK;MAC9B,MAAMC,OAAO,GAAGD,MAAM,CAACI,OAAO;MAC9B,IAAI,CAACL,KAAK,CAACrB,eAAe,CAACuC,QAAQ,CAAChB,OAAO,CAAC,EAAE;QAC5CF,KAAK,CAACrB,eAAe,CAAC8B,IAAI,CAACP,OAAO,CAAC;MACrC;IACF,CAAC;IACDiB,aAAa,EAAEA,CAACnB,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAMC,OAAO,GAAGD,MAAM,CAACI,OAAO;MAC9B,IAAI,CAACL,KAAK,CAACpB,gBAAgB,CAACsC,QAAQ,CAAChB,OAAO,CAAC,EAAE;QAC7CF,KAAK,CAACpB,gBAAgB,CAAC6B,IAAI,CAACP,OAAO,CAAC;MACtC;IACF,CAAC;IACDkB,YAAY,EAAEA,CAACpB,KAAK,EAAEC,MAAM,KAAK;MAC/B,MAAM;QAAEoB,IAAI;QAAEC;MAAM,CAAC,GAAGrB,MAAM,CAACI,OAAO;MACtCL,KAAK,CAACnB,UAAU,CAACwC,IAAI,CAAC,GAAGC,KAAK;IAChC,CAAC;IACDC,sBAAsB,EAAEA,CAACvB,KAAK,EAAEC,MAAM,KAAK;MACzCD,KAAK,CAAChB,gBAAgB,GAAGiB,MAAM,CAACI,OAAO;IACzC,CAAC;IACDmB,iBAAiB,EAAGxB,KAAK,IAAK;MAC5BA,KAAK,CAACf,WAAW,GAAG,CAACe,KAAK,CAACf,WAAW;IACxC,CAAC;IACDwC,cAAc,EAAGzB,KAAK,IAAK;MACzB,OAAOzB,YAAY;IACrB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXwB,UAAU;EACVO,iBAAiB;EACjBC,UAAU;EACVM,YAAY;EACZE,iBAAiB;EACjBC,oBAAoB;EACpBC,WAAW;EACXE,aAAa;EACbC,YAAY;EACZG,sBAAsB;EACtBC,iBAAiB;EACjBC;AACF,CAAC,GAAG7B,cAAc,CAAC8B,OAAO;AAE1B,eAAe9B,cAAc,CAAC+B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}